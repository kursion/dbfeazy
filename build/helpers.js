// Generated by CoffeeScript 2.5.1
(function() {
  var fs;

  fs = require('fs');

  module.exports = {
    //#
    // Creates a file if it does not already exist.
    createFileIfNotExists: function(path, fileEncoding, data = "") {
      var options;
      options = {
        flag: 'wx', // w=write, x=don't overwrite
        encoding: fileEncoding
      };
      try {
        return fs.writeFileSync(path, data, options);
      } catch (error) {}
    },
    //#
    // Gets the nth-indexOf of a symbol 'char' in a given string

    nthIndexOf: function(str, char, nth) {
      var c, i, indexOf, j, len;
      indexOf = -1;
      for (i = j = 0, len = str.length; j < len; i = ++j) {
        c = str[i];
        if (c === char && nth-- > 0) {
          indexOf = i;
        }
      }
      return indexOf;
    },
    //#
    // Sets a key or mulikey if it doesn't exist in the passed object. Thus
    // will mutate the object. It will return the latest cursor

    // Eg: given a multikey 'kursion.pets.cat' and an empty object with the
    // following scructure 'obj'.  The object will be muted to:

    //   kursion: {
    //       pets: {
    //         cat: {}
    //       }
    //   }

    // In this example, the returned cursor will be obj['kursion']['pets']['cat']

    set_value_to_obj: function(obj, multikey, value) {
      var cursor, i, j, k, keys, len;
      cursor = obj;
      keys = multikey.split('.');
      for (i = j = 0, len = keys.length; j < len; i = ++j) {
        k = keys[i];
        if (cursor[k] == null) {
          cursor[k] = {};
        }
        if (i === keys.length - 1 && (value != null)) {
          cursor[k] = value;
        }
        cursor = cursor[k];
      }
      return cursor;
    },
    delete_value_to_obj: function(obj, multikey) {
      var cursor, i, j, k, keys, len;
      cursor = obj;
      keys = multikey.split('.');
      for (i = j = 0, len = keys.length; j < len; i = ++j) {
        k = keys[i];
        if (keys.length - 1 === i) {
          break;
        }
        cursor = cursor[k];
      }
      if (cursor != null) {
        return delete cursor[keys[keys.length - 1]];
      }
    },
    get_value_from_obj: function(obj, multikey) {
      var cursor, j, k, keys, len;
      cursor = obj;
      keys = multikey.split('.');
      for (j = 0, len = keys.length; j < len; j++) {
        k = keys[j];
        cursor = cursor[k];
      }
      return cursor;
    },
    exists_value_from_obj: function(obj, multikey) {
      var cursor, j, k, keys, len;
      cursor = obj;
      keys = multikey.split('.');
      for (j = 0, len = keys.length; j < len; j++) {
        k = keys[j];
        cursor = cursor[k];
        if (cursor == null) {
          return false;
        }
      }
      return true;
    }
  };

}).call(this);
